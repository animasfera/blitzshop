// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  useDecimalJs          = true
  prismaJsonNullability = true
}

// --------------------------------------

model User {
  id                Int               @id @default(autoincrement())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  username          String            @unique
  email             String            @unique
  emailConfirmed    Boolean           @default(false)
  countryIsoCode    String            @default("ru")
  phone             String?
  firstName         String?
  lastName          String?
  hashedPassword    String?
  role              UserRoleEnum      @default(USER)
  timezone          String            @default("Etc/Greenwich")
  locale            String            @default("en")
  avatarUrl         String            @default("")
  status            UserStatusEnum    @default(PENDING)
  buyingInCountries CountryFilterEnum @default(NONE)
  currency          CurrencyEnum      @default(EUR)
  tokens            Token[]
  sessions          Session[]
  cardTokens        CardToken[]       @relation(name: "AllCardTokens")
  notifications     Notification[]
  reviews           Review[]          @relation(name: "ReviewsSent")
  items             Item[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
}

enum UserRoleEnum {
  ADMIN
  MODERATOR
  USER
}

enum UserStatusEnum {
  PENDING
  ACTIVE
  BLOCKED
}

enum CountryFilterEnum {
  NONE
  RUSSIA
  WORLD_EXPECT_RUSSIA
  WORLD
}

enum CurrencyEnum {
  RUB
  USD
  EUR
}

model Token {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  hashedToken String
  type        TokenTypeEnum
  expiresAt   DateTime
  sentTo      String
  user        User          @relation(fields: [userId], references: [id])
  userId      Int

  @@unique([hashedToken, type])
}

enum TokenTypeEnum {
  RESET_PASSWORD
  CONFIRM_EMAIL
  CONFIRM_EMAIL_LEELA_CERT
}

model CardToken {
  id                     Int      @id @default(autoincrement())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  valid                  Boolean  @default(true)
  deleted                Boolean  @default(false)
  invalidReason          String?
  token                  String   @unique
  cardLastFour           String
  cardType               String
  cardExpDate            String
  feeCardTransactionCoef Float    @default(0)
  cardCountryIsoCode     String   @default("ru")
  owner                  User     @relation(name: "AllCardTokens", fields: [ownerId], references: [id])
  ownerId                Int
}

model Notification {
  id        Int                  @id @default(autoincrement())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  viewed    Boolean              @default(false)
  closable  Boolean              @default(true)
  title     String?
  message   String
  isHtml    Boolean              @default(false)
  jsonData  Json?
  type      NotificationTypeEnum @default(INFO)
  res       String?
  user      User                 @relation(fields: [userId], references: [id])
  userId    Int
}

enum NotificationTypeEnum {
  INFO
  ERROR
  SUCCESS
  WARNING
}

enum ReviewStatusEnum {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}

model Review {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  message   String
  status    ReviewStatusEnum @default(PENDING)
  reply     String?
  rating    Float            @default(0)
  sender    User             @relation(name: "ReviewsSent", fields: [senderId], references: [id])
  senderId  Int
  item      Item             @relation(fields: [itemId], references: [id])
  itemId    Int

  @@unique([senderId, itemId])
}

model Category {
  id          Int    @id @default(autoincrement())
  title       String
  description String @default("")
  numItems    Int    @default(0)
  items       Item[]
}

model Price {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  amount    Int          @default(0)
  currency  CurrencyEnum @default(RUB)
  items     Item[]
}

model Image {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  title        String?
  description  String?
  url          String
  imageToItems ImageToItem[]
}

model ImageToItem {
  id         Int    @id @default(autoincrement())
  image      Image  @relation(fields: [imageId], references: [id])
  imageId    Int
  itemCovers Item[] @relation(name: "CoverImageToItem")
  item       Item?  @relation(fields: [itemId], references: [id])
  itemId     Int?
}

enum ItemStatusEnum {
  DRAFT
  SALE
  BLOCKED
  HIDDEN
  OUT_OF_STOCK
}

enum AccessTypeEnum {
  PUBLIC
  LINK
  PRIVATE
}

model Item {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  title        String
  description  String         @default("")
  qty          Int            @default(0)
  weight       Int            @default(0)
  rating       Float          @default(0)
  isFeatured   Boolean        @default(false)
  status       ItemStatusEnum
  access       AccessTypeEnum
  category     Category?      @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  amount       Price?         @relation(fields: [priceId], references: [id])
  priceId      Int?
  coverImage   ImageToItem    @relation(name: "CoverImageToItem", fields: [coverImageId], references: [id])
  coverImageId Int
  user         User?          @relation(fields: [userId], references: [id])
  userId       Int?
  images       ImageToItem[]
  reviews      Review[]
}
