// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  useDecimalJs          = true
  prismaJsonNullability = true
}

// --------------------------------------

model User {
  id                Int               @id @default(autoincrement())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  username          String            @unique
  email             String            @unique
  emailConfirmed    Boolean           @default(false)
  countryIsoCode    String            @default("ru")
  phone             String?
  firstName         String?
  lastName          String?
  hashedPassword    String?
  role              UserRoleEnum      @default(USER)
  timezone          String            @default("Etc/Greenwich")
  locale            String            @default("en")
  avatarUrl         String            @default("")
  status            UserStatusEnum    @default(PENDING)
  tokens            Token[]
  sessions          Session[]
  buyingInCountries CountryFilterEnum @default(NONE)
  currency          CurrencyEnum      @default(EUR)
  cardTokens        CardToken[]       @relation(name: "AllCardTokens")
  notification      Notification[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

enum UserRoleEnum {
  ADMIN
  MODERATOR
  USER
}

enum UserStatusEnum {
  PENDING
  ACTIVE
  BLOCKED
}

enum CountryFilterEnum {
  NONE
  RUSSIA
  WORLD_EXPECT_RUSSIA
  WORLD
}

enum CurrencyEnum {
  RUB
  USD
  EUR
}

model Token {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  hashedToken String
  type        TokenTypeEnum
  expiresAt   DateTime
  sentTo      String
  user        User          @relation(fields: [userId], references: [id])
  userId      Int

  @@unique([hashedToken, type])
}

enum TokenTypeEnum {
  RESET_PASSWORD
  CONFIRM_EMAIL
  CONFIRM_EMAIL_LEELA_CERT
}

model CardToken {
  id                     Int      @id @default(autoincrement())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  valid                  Boolean  @default(true)
  deleted                Boolean  @default(false)
  invalidReason          String?
  token                  String   @unique
  cardLastFour           String
  cardType               String
  cardExpDate            String
  feeCardTransactionCoef Float    @default(0)
  cardCountryIsoCode     String   @default("ru")
  owner                  User     @relation(name: "AllCardTokens", fields: [ownerId], references: [id])
  ownerId                Int
}

model Notification {
  id        Int                  @id @default(autoincrement())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  viewed    Boolean              @default(false)
  closable  Boolean              @default(true)
  title     String?
  message   String
  isHtml    Boolean              @default(false)
  jsonData  Json?
  type      NotificationTypeEnum @default(INFO)
  res       String?
  user      User                 @relation(fields: [userId], references: [id])
  userId    Int
}

enum NotificationTypeEnum {
  INFO
  ERROR
  SUCCESS
  WARNING
}
