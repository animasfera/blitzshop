// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  useDecimalJs          = true
  prismaJsonNullability = true
}

// --------------------------------------

model User {
  id                    Int               @id @default(autoincrement())
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  username              String            @unique
  email                 String            @unique
  emailConfirmed        Boolean           @default(false)
  countryIsoCode        String            @default("ru")
  phone                 String?
  firstName             String?
  lastName              String?
  hashedPassword        String?
  timezone              String            @default("Etc/Greenwich")
  locale                LocaleEnum        @default(EN)
  avatarUrl             String            @default("")
  role                  UserRoleEnum      @default(USER)
  status                UserStatusEnum    @default(PENDING)
  buyingInCountries     CountryFilterEnum @default(NONE)
  currency              CurrencyEnum      @default(EUR)
  location              Location?         @relation(fields: [locationId], references: [id])
  locationId            Int?
  tokens                Token[]
  sessions              Session[]
  cardTokens            CardToken[]       @relation(name: "AllCardTokens")
  notifications         Notification[]
  reviews               Review[]          @relation(name: "ReviewsSent")
  items                 Item[]
  carts                 Cart[]
  orders                Order[]
  shippingAddresses     ShippingAddress[]
  refundProcessedByUser Refund[]          @relation(name: "ProcessedByUser")
  refunds               Refund[]          @relation(name: "RefundUser")
  transactions          Transaction[]
  messages              Message[]
  messageRooms          UserToChatRoom[]
  configs               Config[]
  // config             Config?           @relation(fields: [configKey], references: [key])
  // configKey          String?
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
}

enum UserRoleEnum {
  ADMIN
  MODERATOR
  USER
}

enum UserStatusEnum {
  PENDING
  ACTIVE
  BLOCKED
}

enum CountryFilterEnum {
  NONE
  RUSSIA
  WORLD_EXPECT_RUSSIA
  WORLD
}

enum CurrencyEnum {
  RUB
  USD
  EUR
}

enum LocaleEnum {
  RU
  EN
}

model Token {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  hashedToken String
  expiresAt   DateTime
  sentTo      String
  type        TokenTypeEnum
  user        User          @relation(fields: [userId], references: [id])
  userId      Int

  @@unique([hashedToken, type])
}

enum TokenTypeEnum {
  RESET_PASSWORD
  CONFIRM_EMAIL
  CONFIRM_EMAIL_LEELA_CERT
}

model CardToken {
  id                     Int      @id @default(autoincrement())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  valid                  Boolean  @default(true)
  deleted                Boolean  @default(false)
  invalidReason          String?
  token                  String   @unique
  cardLastFour           String
  cardType               String
  cardExpDate            String
  feeCardTransactionCoef Float    @default(0)
  cardCountryIsoCode     String   @default("ru")
  owner                  User     @relation(name: "AllCardTokens", fields: [ownerId], references: [id])
  ownerId                Int
}

model Notification {
  id        Int                  @id @default(autoincrement())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  viewed    Boolean              @default(false)
  closable  Boolean              @default(true)
  title     String?
  message   String
  isHtml    Boolean              @default(false)
  jsonData  Json?
  res       String?
  type      NotificationTypeEnum @default(INFO)
  user      User                 @relation(fields: [userId], references: [id])
  userId    Int
}

enum NotificationTypeEnum {
  INFO
  ERROR
  SUCCESS
  WARNING
}

enum ReviewStatusEnum {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}

model Review {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  message   String
  reply     String?
  rating    Float            @default(0)
  status    ReviewStatusEnum @default(PENDING)
  sender    User             @relation(name: "ReviewsSent", fields: [senderId], references: [id])
  senderId  Int
  item      Item             @relation(fields: [itemId], references: [id])
  itemId    Int

  @@unique([senderId, itemId])
}

model Category {
  id             Int             @id @default(autoincrement())
  titleRu        String
  titleEn        String
  descriptionRu  String          @default("")
  descriptionEn  String          @default("")
  numItems       Int             @default(0)
  items          Item[]
  purchasedItems PurchasedItem[]
}

model Price {
  id                   Int             @id @default(autoincrement())
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  amount               Int             @default(0)
  currency             CurrencyEnum    @default(RUB)
  items                Item[]
  carts                Cart[]
  orders               Order[]
  purchasedItems       PurchasedItem[]
  refunds              Refund[]
  invoices             Invoice[]
  amountTransactions   Transaction[]   @relation(name: "AmountTransaction")
  feeTotalTransactions Transaction[]   @relation(name: "FeeTotalTransaction")
  netTransactions      Transaction[]   @relation(name: "NetTransaction")
}

model Image {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  title          String?
  description    String?
  url            String
  imageToItems   ImageToItem[]
  purchasedItems PurchasedItem[]
}

model ImageToItem {
  id         Int    @id @default(autoincrement())
  image      Image  @relation(fields: [imageId], references: [id])
  imageId    Int
  item       Item?  @relation(fields: [itemId], references: [id])
  itemId     Int?
  itemCovers Item[] @relation(name: "CoverImageToItem")
}

enum ItemStatusEnum {
  DRAFT
  SALE
  BLOCKED
  HIDDEN
  OUT_OF_STOCK
}

enum AccessTypeEnum {
  PUBLIC
  LINK
  PRIVATE
}

model Item {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  title          String
  description    String          @default("")
  color          String?
  qty            Int             @default(0)
  weight         Int             @default(0)
  rating         Float           @default(0)
  isFeatured     Boolean         @default(false)
  status         ItemStatusEnum?
  access         AccessTypeEnum  @default(PUBLIC)
  category       Category?       @relation(fields: [categoryId], references: [id])
  categoryId     Int?
  amount         Price           @relation(fields: [amountId], references: [id])
  amountId       Int
  coverImage     ImageToItem     @relation(name: "CoverImageToItem", fields: [coverImageId], references: [id])
  coverImageId   Int
  user           User?           @relation(fields: [userId], references: [id])
  userId         Int?
  location       Location?       @relation(fields: [locationId], references: [id])
  locationId     Int?
  chatRoom       ChatRoom?       @relation(fields: [chatRoomId], references: [id])
  chatRoomId     Int?            @unique
  images         ImageToItem[]
  reviews        Review[]
  purchasedItems PurchasedItem[]
  invoices       Invoice[]
  cartToItems    CartToItem[]
}

model CartToItem {
  id     Int  @id @default(autoincrement())
  qty    Int  @default(1)
  item   Item @relation(fields: [itemId], references: [id])
  itemId Int
  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  @@unique([cartId, itemId])
}

model Cart {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  numItems     Int          @default(0)
  sessionId    String?
  mergedCartId Int?
  amount       Price        @relation(fields: [amountId], references: [id])
  amountId     Int
  user         User?        @relation(fields: [userId], references: [id])
  userId       Int?
  cartToItems  CartToItem[]
}

model OrderLog {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  comment   String?
  status    OrderStatusEnum @default(PENDING)
  orders    Order[]
}

enum OrderStatusEnum {
  PENDING // Заказ создан, но еще не обработан
  PROCESSING // Заказ находится в процессе обработки и подготовки к доставке
  COMPLETED // Заказ успешно выполнен и доставлен клиенту
  CANCELLED // Заказ отменен по какой-либо причине
  ON_HOLD // Заказ приостановлен и ожидает решения или действий со стороны клиента или магазина
  SHIPPED // Заказ был отправлен или передан службе доставки.
  DELIVERED // Заказ доставлен клиенту
  REFUND_REQUESTED // Был сделан запрос на возврат
  REFUND_REJECTED // Запрос на возврат отклонен
  REFUND_APPROVED // Утвержден запрос на возврат
  REFUNDED // Заказ был возвращен, и клиенту был осуществлен возврат средств
  PARTIALLY_COMPLETED // Заказ частично выполнен, если в нем есть несколько товаров, и не все из них были доставлены или выполнены
}

model ShippingMethod {
  id          Int                 @id @default(autoincrement())
  title       String
  description String?
  fee         Int
  feeType     ShippingFeeTypeEnum @default(FIXED)
  orders      Order[]
}

enum ShippingFeeTypeEnum {
  FIXED
  PER_KG
}

model Order {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  couponCode        String?
  notes             String?
  status            OrderStatusEnum  @default(PENDING)
  amount            Price            @relation(fields: [amountId], references: [id])
  amountId          Int
  orderLog          OrderLog         @relation(fields: [orderLogId], references: [id])
  orderLogId        Int
  shippingMethod    ShippingMethod?  @relation(fields: [shippingMethodId], references: [id])
  shippingMethodId  Int?
  user              User             @relation(fields: [userId], references: [id])
  userId            Int
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId Int?
  purchasedItems    PurchasedItem[]
  refunds           Refund[]
  invoices          Invoice[]
}

model Country {
  id                String            @unique @db.Char(2)
  titleRu           String
  titleEn           String
  shippingAddresses ShippingAddress[]
  location          Location[]
}

model PurchasedItem {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  qty           Int            @default(0)
  title         String
  description   String
  amount        Price          @relation(fields: [amountId], references: [id])
  amountId      Int
  item          Item           @relation(fields: [itemId], references: [id])
  itemId        Int
  category      Category?      @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  coverImage    Image          @relation(fields: [coverImageId], references: [id])
  coverImageId  Int
  order         Order?         @relation(fields: [orderId], references: [id])
  orderId       Int?
  itemToRefunds ItemToRefund[]
}

model ShippingAddress {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  firstName    String
  lastName     String
  phone        String
  instructions String?
  address      String
  city         String
  postalCode   String
  country      Country  @relation(fields: [countryId], references: [id])
  countryId    String   @db.Char(2)
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  orders       Order[]
}

model PaymentMethod {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  title        String
  description  String?
  refunds      Refund[]
  invoices     Invoice[]
  transactions Transaction[]
}

model Refund {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  notes          String?
  refundedAt     DateTime?
  status         RefundStatusEnum @default(PENDING)
  amount         Price            @relation(fields: [amountId], references: [id])
  amountId       Int
  refundMethod   PaymentMethod    @relation(fields: [refundMethodId], references: [id])
  refundMethodId Int
  processedBy    User             @relation(name: "ProcessedByUser", fields: [processedById], references: [id])
  processedById  Int
  order          Order            @relation(fields: [orderId], references: [id])
  orderId        Int
  chatRoom       ChatRoom?        @relation(fields: [chatRoomId], references: [id])
  chatRoomId     Int?             @unique
  user           User             @relation(name: "RefundUser", fields: [userId], references: [id])
  userId         Int
  itemToRefund   ItemToRefund[]
}

enum RefundStatusEnum {
  PENDING // Ожидает обработки
  PROCESSING // Обрабатывается
  COMPLETED // Завершен
  CANCELLED // Отменен
  DECLINED // Отклонен
  APPROVED // Одобрен
  REJECTED // Отклонен
}

model ItemToRefund {
  id       Int           @id @default(autoincrement())
  item     PurchasedItem @relation(fields: [itemId], references: [id])
  itemId   Int
  refund   Refund        @relation(fields: [refundId], references: [id])
  refundId Int
}

model Invoice {
  id                Int               @id @default(autoincrement())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  paidAt            DateTime
  error             String?
  notes             String?
  status            InvoiceStatusEnum @default(PENDING)
  amount            Price             @relation(fields: [amountId], references: [id])
  amountId          Int
  paymentMethod     PaymentMethod     @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId   Int
  order             Order             @relation(fields: [orderId], references: [id])
  orderId           Int
  parentItem        Item              @relation(fields: [parentItemId], references: [id])
  parentItemId      Int
  originalInvoice   Invoice?          @relation(name: "CreditNotes", fields: [originalInvoiceId], references: [id])
  originalInvoiceId Int
  creditNotes       Invoice[]         @relation(name: "CreditNotes")
  transactions      Transaction[]
}

enum InvoiceStatusEnum {
  PENDING // ожидание оплаты
  COMPLETED // оплачено
  FAILED // не удалось оплатить
  REFUNDED // возвращено
  PROCESSING // Оплата обрабатывается или находится в процессе
  AUTHORIZED // Оплата авторизована, но еще не завершена
  DECLINED // Оплата отклонена
  PARTIALLY_PAID // Заказ частично оплачен
  AWAITING_CONFIRMATION // Ожидание подтверждения оплаты
  VOIDED // Оплата аннулирована
  ABANDONED // Оплата не завершена или прервана пользователем
  DISPUTED // Оплата оспаривается или находится в процессе разрешения спора
  EXPIRED // Время для оплаты истекло
}

model Transaction {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  remoteTransactionId String?
  description         String
  failureReason       String?
  failReasonCode      Int?
  metadata            Json
  receiptUrl          String?
  status              TransactionStatusEnum @default(PENDING)
  type                TransactionTypeEnum
  amount              Price                 @relation(name: "AmountTransaction", fields: [amountId], references: [id])
  amountId            Int
  feeTotal            Price                 @relation(name: "FeeTotalTransaction", fields: [feeTotalId], references: [id])
  feeTotalId          Int
  net                 Price                 @relation(name: "NetTransaction", fields: [netId], references: [id])
  netId               Int
  paymentMethod       PaymentMethod         @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId     Int
  invoice             Invoice               @relation(fields: [invoiceId], references: [id])
  invoiceId           Int
  user                User                  @relation(fields: [userId], references: [id])
  userId              Int
}

enum TransactionStatusEnum {
  PENDING
  PAYING
  FINISHED
  CANCELED
  FAILED
}

enum TransactionTypeEnum {
  SALE
  REFUND
  MANUAL_ADJUSTMENT
}

model Config {
  key   String  @id
  value String?
  users User[]
}

model FxRate {
  updatedAt DateTime @updatedAt
  from      String
  to        String
  rate      Float

  @@unique([from, to])
}

model WaitingUser {
  email    String  @id
  notified Boolean @default(false)
}

model Location {
  id        Int     @id @default(autoincrement())
  lat       Float
  lng       Float
  addressRu String  @default("")
  addressEn String  @default("")
  cityRu    String  @default("")
  cityEn    String  @default("")
  country   Country @relation(fields: [countryId], references: [id])
  countryId String  @db.Char(2)
  users     User[]
  items     Item[]
}

enum ChatRoomTypeEnum {
  PAIR
  GROUP
  REFUND
}

enum ChatRoomAccessEnum {
  PUBLIC
  PRIVATE
}

model ChatRoom {
  id        Int                @id @default(autoincrement())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  avatarUrl String?
  name      String?
  type      ChatRoomTypeEnum   @default(PAIR)
  access    ChatRoomAccessEnum @default(PRIVATE)
  refund    Refund?
  item      Item?
  messages  Message[]
  users     UserToChatRoom[]
}

model Message {
  id                   Int             @id @default(autoincrement())
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  message              String
  sender               User            @relation(fields: [senderId], references: [id])
  senderId             Int
  room                 ChatRoom        @relation(fields: [roomId], references: [id])
  roomId               Int
  lastInChatRoomToUser UserToChatRoom?
}

model UserToChatRoom {
  numUnread         Int           @default(0)
  role              UserRoleEnum?
  user              User          @relation(fields: [userId], references: [id])
  userId            Int
  room              ChatRoom      @relation(fields: [roomId], references: [id])
  roomId            Int
  lastReadMessage   Message?      @relation(fields: [lastReadMessageId], references: [id])
  lastReadMessageId Int?          @unique

  @@unique([userId, roomId])
}

model MailReceiver {
  id    String @unique
  title String
  query Json
  Mail  Mail[]
}

enum MailStatusEnum {
  PENDING
  SENT
  ERROR
}

model Mail {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  subjectRu       String
  subjectEn       String
  bodyRu          Json
  bodyEn          Json
  status          MailStatusEnum @default(PENDING)
  errorMessage    String?
  sendScheduledAt DateTime
  sentAt          DateTime?
  tags            Json
  receiverType    MailReceiver?  @relation(fields: [receiverTypeId], references: [id])
  receiverTypeId  String?
}
